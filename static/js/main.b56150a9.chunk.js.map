{"version":3,"sources":["redux/phoneBook/phoneBookActions.js","redux/phoneBook/phoneBookOperations.js","redux/phoneBook/phoneBookSelectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/Header/Header.jsx","App.js","redux/phoneBook/phoneBookReducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","getContacts","state","phoneBook","contacts","getFilter","filter","getVisibleContacts","createSelector","optimizedFilter","toLowerCase","name","includes","ContactForm","number","handleNameChange","event","currentTarget","value","setState","handleNumberChange","onExistingContactAlert","preventDefault","alert","getSomeOfName","optimizedContactName","props","some","onAddNewContact","this","existingContact","className","action","htmlFor","onChange","type","disabled","length","onClick","e","Component","connect","dispatch","contact","actions","post","then","data","catch","error","addContact","handleFilterChange","window","placeholder","ContactList","fetchContacts","map","index","onDeleteContact","id","shortId","generate","delete","deleteContact","get","Header","CssBaseline","AppBar","position","Toolbar","Typography","variant","color","noWrap","App","createReducer","payload","loading","combineReducers","rootReducer","phoneBookReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b56150a9.chunk.js","sourcesContent":["// import * as types from './phoneBookTypes'\r\nimport shortId from 'shortid'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n// import axios from 'axios'\r\nexport const fetchContactsRequest = createAction('phoneBook/fetchContactsRequest')\r\nexport const fetchContactsSuccess = createAction('phoneBook/fetchContactsSuccess')\r\nexport const fetchContactsError = createAction('phoneBook/fetchContactsError')\r\n\r\nexport const addContactRequest = createAction('phoneBook/addContactRequest')\r\nexport const addContactSuccess = createAction('phoneBook/addContactSuccess')\r\nexport const addContactError = createAction('phoneBook/addContactError')\r\n  \r\nexport const deleteContactRequest = createAction('phoneBook/deleteContactRequest')\r\nexport const deleteContactSuccess = createAction('phoneBook/deleteContactSuccess')\r\nexport const deleteContactError = createAction('phoneBook/deleteContactError')\r\n  \r\n\r\nexport const changeFilter = createAction('phoneBook/filter')\r\nexport const makeAlert = createAction('phoneBook/alert')\r\n\r\n","import axios from 'axios'\r\nimport * as actions from './phoneBookActions'\r\naxios.defaults.baseURL = 'http://localhost:3000'\r\n\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n    dispatch(actions.fetchContactsRequest())\r\n    axios.get('/contacts')\r\n        .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error)))\r\n}\r\nexport const addContact = (name, number) => dispatch => {\r\n    const contact = { name, number }\r\n    \r\n    dispatch(actions.addContactRequest())\r\n    axios.post('/contacts', contact)\r\n        .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n        .catch(error => dispatch(actions.addContactError(error)))\r\n}\r\n\r\nexport const deleteContact = id => dispatch => {\r\n    dispatch(actions.deleteContactRequest())\r\n     axios.delete('/contacts/' + id)\r\n        .then(() => dispatch(actions.deleteContactSuccess(id)))\r\n        .catch(error => dispatch(actions.deleteContactError(error)))\r\n}","import {createSelector} from '@reduxjs/toolkit'\r\n\r\nexport const getContacts = state => state.phoneBook.contacts\r\n\r\nexport const getFilter = state => state.phoneBook.filter\r\n\r\nexport const getVisibleContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\r\n    const optimizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) => name.toLowerCase().includes(optimizedFilter));\r\n})\r\n// export const getVisibleContacts = state => {\r\n//     const contacts = getContacts(state)\r\n//     const filter = getFilter(state)\r\n//     const optimizedFilter = filter.toLowerCase()\r\n//     return contacts.filter(({name}) => name.toLowerCase().includes(optimizedFilter))\r\n// }\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport {connect } from 'react-redux'\r\nimport { addContact } from '../../redux/phoneBook/phoneBookOperations'\r\nimport { getContacts } from '../../redux/phoneBook/phoneBookSelectors'\r\n\r\n\r\n\r\n\r\n// const classes = useStyles();\r\n\r\nclass ContactForm extends Component{\r\n    state = {\r\n        name: '',\r\n        number: '+38'\r\n    }\r\n    handleNameChange = (event) => {\r\n        const {name, value} = event.currentTarget\r\n        this.setState({ [name]: value })\r\n    }\r\n    handleNumberChange = (event) => {\r\n        const {name, value} = event.currentTarget\r\n        this.setState({[name]: value})\r\n    }\r\n    onExistingContactAlert = (event) => {\r\n        event.preventDefault()\r\n        this.setState({name: '', number: '+38'})\r\n        alert(this.state.name + ' уже есть в списке контактов')\r\n    }\r\n\r\n    getSomeOfName = (name) => {\r\n        const optimizedContactName = name.toLowerCase();\r\n        return this.props.contacts.some(({name}) => name.toLowerCase() === optimizedContactName)\r\n      }\r\n    \r\n    render() {\r\n        const { onAddNewContact } = this.props\r\n        const { name, number } = this.state\r\n        const existingContact = this.getSomeOfName(name)\r\n        return (\r\n            <form className='contact-form' action=\"\">\r\n                <label htmlFor=\"\">\r\n                    Name <input\r\n                    name='name'\r\n                    onChange={this.handleNameChange}\r\n                    type=\"text\"\r\n                    value={name} />\r\n                </label>\r\n                <label htmlFor=\"\">\r\n                    Number <input\r\n                    name='number'\r\n                    onChange={this.handleNumberChange}\r\n                    type=\"tel\"\r\n                    value={number} />\r\n                </label>\r\n                <button\r\n                    disabled={(name.length && number.length > 3) \r\n                        ? false\r\n                        : true\r\n                    }\r\n                        onClick={existingContact\r\n                            ? this.onExistingContactAlert \r\n                            : (e) => {\r\n                                e.preventDefault()\r\n                                onAddNewContact(name, number)\r\n                                this.setState({name: '', number: '+38'})\r\n                    }}\r\n                    type='submit'>Создать\r\n                </button>\r\n                </form>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    onAddNewContact: (name, number) => dispatch(addContact(name, number)),\r\n})\r\nconst mapStateToProps = (state) => ({\r\n    contacts: getContacts(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { changeFilter } from '../../redux/phoneBook/phoneBookActions'\r\nimport {getFilter} from '../../redux/phoneBook/phoneBookSelectors'\r\n\r\nconst Filter = (props) => {\r\n    window.props = props\r\n    return (\r\n        <label htmlFor=\"\">\r\n          <input\r\n            name='filter'\r\n            type='text'\r\n            placeholder='Search contacts'\r\n            value={props.value}\r\n            onChange={props.handleFilterChange}\r\n          />\r\n        </label>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: getFilter(state)\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleFilterChange: (e) => dispatch(changeFilter(e.currentTarget.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport { deleteContact, fetchContacts } from '../../redux/phoneBook/phoneBookOperations';\r\nimport shortId from 'shortid'\r\nimport { useEffect } from 'react'\r\nimport {getVisibleContacts} from '../../redux/phoneBook/phoneBookSelectors'\r\n\r\n\r\n\r\nclass ContactList extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts()\r\n  }\r\n\r\n  // componentDidUpdate(prevProps, prevSat)\r\n\r\n  render() {\r\n      return (\r\n          this.props.contacts.length\r\n          ? this.props.contacts.map((contact, index) => {\r\n            return (\r\n              <li key={contact.id}>\r\n                <p>{index + 1 + ') ' + contact.name + \" : \" + contact.number}</p>\r\n                <button onClick={() => this.props.onDeleteContact(contact.id)} type='button'>Удалить</button>\r\n              </li>\r\n            )\r\n          })\r\n          : <li key={shortId.generate()}>\r\n              <p>No saved contacts yet</p>\r\n            </li>\r\n    )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getVisibleContacts(state)\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n  fetchContacts: () => dispatch(fetchContacts())\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react'\r\nimport { CssBaseline, AppBar, Toolbar, Typography } from '@material-ui/core'\r\nimport ContactsIcon from '@material-ui/icons/Contacts';\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n      <>\r\n        <CssBaseline />\r\n        <AppBar position=\"relative\">\r\n          <Toolbar>\r\n            <ContactsIcon />\r\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n              PhoneBook\r\n            </Typography>\r\n          </Toolbar>\r\n      </AppBar>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\nimport { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm'\nimport Filter from './components/Filter/Filter'\nimport ContactList from './components/ContactList/ContactList'\nimport './sass/main.scss'\n// import { CssBaseline, AppBar, Toolbar, Typography } from '@material-ui/core'\n// import ContactsIcon from '@material-ui/icons/Contacts';\nimport Header from './components/Header/Header'\n\n\nconst App = () => {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className='container'>\n          <div>\n            <ContactForm/>\n          </div>\n          <div>\n            <h2>Contacts</h2>\n            <Filter/>\n            <ul>\n              <ContactList/>\n            </ul>\n          </div>\n        </div>\n    </div>\n  )\n} \n\n\n\nexport default App;\n","import {combineReducers} from 'redux'\r\nimport {createReducer} from '@reduxjs/toolkit'\r\nimport * as actions from './phoneBookActions'\r\n\r\n\r\nconst contacts = createReducer([], {\r\n    [actions.fetchContactsSuccess]: (state, action) => action.payload,\r\n    [actions.addContactSuccess]: (state, action) => [...state, action.payload],\r\n    [actions.deleteContactSuccess]: (state, action) => state.filter(contact => contact.id !== action.payload)\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (state, action) => action.payload\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [actions.addContactRequest]: () => true,\r\n    [actions.addContactSuccess]: () => false,\r\n    [actions.addContactError]: () => false,\r\n    [actions.deleteContactRequest]: () => true,\r\n    [actions.deleteContactSuccess]: () => false,\r\n    [actions.deleteContactError]: () => false,\r\n})\r\nexport default combineReducers({\r\n    contacts,\r\n    filter,\r\n    loading,\r\n})\r\n","import {configureStore, getDefaultMiddleware, combineReducers} from '@reduxjs/toolkit'\r\nimport phoneBookReducer from './phoneBook/phoneBookReducer'\r\nimport logger from 'redux-logger'\r\nimport storage from 'redux-persist/lib/storage' \r\nimport \r\n{\r\n    persistReducer,\r\n    persistStore,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n}from 'redux-persist'\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    phoneBook: phoneBookReducer\r\n})\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n        },\r\n    }),\r\n    logger,\r\n    ]\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n})\r\n\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={'Loading'} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}